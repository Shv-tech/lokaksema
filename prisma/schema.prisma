generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(cuid())
  email         String       @unique
  emailVerified DateTime?
  passwordHash  String?
  firstName     String?
  lastName      String?
  organization  String?
  title         String?
  bio           String?
  image         String?
  accountType   AccountType  @default(ATTENDEE)
  role          Role         @default(USER)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  // Relations
  sessions      Registration[]
  tickets       Ticket[]
  queries       Query[]
  waitlist      Waitlist?     // 1:1 (inverse side)

  accounts      Account[]
  sessionsAuth  Session[]
}

enum AccountType {
  ATTENDEE
  SPEAKER
  SPONSOR
  MEDIA
  STUDENT
  VIP
}

enum Role {
  USER
  ORGANIZER
  ADMIN
}

model Account {
  id                String @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Speaker {
  id            String   @id @default(cuid())
  fullName      String
  title         String?
  organization  String?
  country       String?
  headshotUrl   String?
  bio           String?
  socials       Json?
  createdAt     DateTime @default(now())

  sessions      AgendaSession[] @relation("SpeakerSessions")
}

model AgendaSession {
  id           String       @id @default(cuid())
  title        String
  description  String?
  type         SessionType
  startTime    DateTime
  endTime      DateTime
  room         String?
  track        String?
  capacity     Int?
  materialsUrl String?
  recordingUrl String?

  speakers     Speaker[] @relation("SpeakerSessions")
}

enum SessionType {
  KEYNOTE
  PANEL
  WORKSHOP
  TALK
  NETWORKING
  BREAK
}

model Registration {
  id            String        @id @default(cuid())
  userId        String
  ticketType    TicketType
  paymentStatus PaymentStatus @default(PENDING)
  specialReq    String?
  dietary       String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Inverse side for Ticket.registration
  tickets       Ticket[]
}

enum TicketType {
  GENERAL
  STUDENT
  VIP
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

model Ticket {
  id             String         @id @default(cuid())
  userId         String
  registrationId String?
  qrCodeUrl      String?
  checkedIn      Boolean        @default(false)
  createdAt      DateTime       @default(now())

  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  registration   Registration?  @relation(fields: [registrationId], references: [id])
}

model Sponsor {
  id           String   @id @default(uuid())
  companyName  String
  tier         String
  contactName  String
  contactEmail String
  websiteUrl   String
  createdAt    DateTime @default(now())
  
}

enum SponsorTier {
  PLATINUM
  GOLD
  SILVER
  BRONZE
  CUSTOM
}

model Waitlist {
  id            String     @id @default(cuid())
  email         String     @unique
  firstName     String?
  lastName      String?
  organization  String?
  role          String?
  interests     String?
  motivation    String?
  score         Int        @default(0)
  position      Int?
  status        WaitStatus @default(PENDING)
  createdAt     DateTime   @default(now())

  // 1:1 with User â†’ userId must be unique
  userId        String?    @unique
  user          User?      @relation(fields: [userId], references: [id])
}

enum WaitStatus {
  PENDING
  INVITED
  ACCEPTED
  DECLINED
}

model Query {
  id        String        @id @default(cuid())
  userId    String?
  category  QueryCategory
  subject   String
  message   String
  priority  Int           @default(0)
  createdAt DateTime      @default(now())
  handledBy String?

  user      User?         @relation(fields: [userId], references: [id])
}

enum QueryCategory {
  GENERAL
  TECHNICAL
  SPONSORSHIP
  MEDIA
  ACCESSIBILITY
  PAYMENT
  TRAVEL
  NETWORKING
}
